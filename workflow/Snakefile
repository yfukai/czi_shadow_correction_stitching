from glob import glob
from os import path

czi_files = glob(path.join("**","*.czi"),recursive=True)
czi_files = [f[:-4] for f in czi_files if path.isfile(f)]
output_directory = config["output_directory"]

#configfile: "config/config.yaml"
#configfile: "../config/config.yaml"

def maybe_to_temp(filename,notemp=False):
    return temp(filename) if config["remove_intermediate"] and not notemp else filename

rule all:
  input: 
#    expand("{czi_file}_analyzed.created", czi_file=czi_files)
#    expand("{czi_file}_analyzed/.calculate_background.done", czi_file=czi_files)
#    expand("{czi_file}_analyzed/.rescale_background.done", czi_file=czi_files)
#    expand("{czi_file}_analyzed/.rescale_images.done", czi_file=czi_files)
#    expand("{czi_file}_analyzed/.calculate_stitching.done", czi_file=czi_files)
    expand("{czi_file}_analyzed/.process_stitching.done", czi_file=czi_files),
    expand(f"{{czi_file}}_analyzed/stitched_image_{config['rescale_method']}.zarr", czi_file=czi_files),
    expand(f"{{czi_file}}_analyzed/stitched_image_{config['rescale_method']}_tiff", czi_file=czi_files) 
      if config["output_tiff"] else [],
    expand(f"{{czi_file}}_analyzed/stitched_image_{config['rescale_method']}_thumbnail", czi_file=czi_files) 
      if config["output_thumbnail"] else []


rule f2_create_thumbnails:
  input:
    output_dir_created = "{czi_file}_analyzed/.process_stitching.done",
    zarr_path = f"{{czi_file}}_analyzed/stitched_image_{config['rescale_method']}.zarr"
  output:
    directory(f"{{czi_file}}_analyzed/stitched_image_{config['rescale_method']}_thumbnail")
  threads:
    1
  conda:
    "envs/conda_env.yaml"
  script:
    "scripts/f2_create_thumbnails.py"
 
rule f1_zarr_to_tiff:
  input:
    output_dir_created = "{czi_file}_analyzed/.process_stitching.done",
    zarr_path = f"{{czi_file}}_analyzed/stitched_image_{config['rescale_method']}.zarr"
  output:
    directory(f"{{czi_file}}_analyzed/stitched_image_{config['rescale_method']}_tiff")
  threads:
    1
  conda:
    "envs/conda_env.yaml"
  script:
    "scripts/f1_zarr_to_tiff.py"
 
rule e_process_stitching:
  input:
    output_dir_created = "{czi_file}_analyzed/.calculate_stitching.done"
  output:
    touch("{czi_file}_analyzed/.process_stitching.done"),
    maybe_to_temp(
      directory(f"{{czi_file}}_analyzed/stitched_image_{config['rescale_method']}.zarr"),
      not config["output_tiff"]
    )
  threads:
    1
  conda:
    "envs/conda_env.yaml"
  script:
    "scripts/e_process_stitching.py"
    
rule d_calculate_stitching:
  input:
    output_dir_created = "{czi_file}_analyzed/.rescale_images.done"
  output:
    touch("{czi_file}_analyzed/.calculate_stitching.done"),
  threads:
    1
  conda:
    "envs/conda_env.yaml"
  script:
    "scripts/d_stitch_images.py"
 
rule c_rescale_images:
  input:
    filename = "{czi_file}.czi", 
    output_dir_created = "{czi_file}_analyzed/.rescale_background.done"
  output:
    touch("{czi_file}_analyzed/.rescale_images.done")
    maybe_to_temp(
      directory(f"{{czi_file}}_analyzed/rescaled_images/rescaled_image_{config['rescale_method']}")
    ),
  threads:
    1
  conda:
    "envs/conda_env.yaml"
  script:
    "scripts/c_rescale_images.py"
 
rule b_rescale_background:
  input:
    output_dir_created = "{czi_file}_analyzed/.calculate_background.done"
  output:
    touch("{czi_file}_analyzed/.rescale_background.done")
  threads:
    1
  conda:
    "envs/conda_env.yaml"
  script:
    "scripts/b_rescale_background.py"
 
rule a_calculate_background:
  input:
    filename = "{czi_file}.czi", 
    output_dir_created = "{czi_file}_analyzed.created"
  output:
    touch("{czi_file}_analyzed/.calculate_background.done"),
    maybe_to_temp("{czi_file}_analyzed/background_per_tile.hdf5"),

  threads:
    workflow.cores
  conda:
    "envs/conda_env.yaml"
  script:
    "scripts/a_calculate_background.py"
    
rule create_output_directories:
  input:
    "{czi_file}.czi"
  output:
    temp("{czi_file}_analyzed.created")
  run:
    output1=output[0].replace(".created","")
    output2=path.join(output_directory,output1)
    output3=path.dirname(output1)
    shell("sync && mkdir -p {output2} && ln -sf {output2} {output3} && touch {output[0]}")
  
